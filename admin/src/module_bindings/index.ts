// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AuthenticateAdmin } from "./authenticate_admin_reducer.ts";
export { AuthenticateAdmin };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { DeletePersonalBest } from "./delete_personal_best_reducer.ts";
export { DeletePersonalBest };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { KickPlayer } from "./kick_player_reducer.ts";
export { KickPlayer };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { SetNameFor } from "./set_name_for_reducer.ts";
export { SetNameFor };
import { SetPlayerBanned } from "./set_player_banned_reducer.ts";
export { SetPlayerBanned };
import { SetUserData } from "./set_user_data_reducer.ts";
export { SetUserData };
import { UpdatePersonalBest } from "./update_personal_best_reducer.ts";
export { UpdatePersonalBest };

// Import and reexport all table handle types
import { PersonalBestTableHandle } from "./personal_best_table.ts";
export { PersonalBestTableHandle };
import { SettingTableHandle } from "./setting_table.ts";
export { SettingTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserDataTableHandle } from "./user_data_table.ts";
export { UserDataTableHandle };

// Import and reexport all types
import { PersonalBest } from "./personal_best_type.ts";
export { PersonalBest };
import { Setting } from "./setting_type.ts";
export { Setting };
import { User } from "./user_type.ts";
export { User };
import { UserData } from "./user_data_type.ts";
export { UserData };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };

const REMOTE_MODULE = {
  tables: {
    personal_best: {
      tableName: "personal_best",
      rowType: PersonalBest.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    setting: {
      tableName: "setting",
      rowType: Setting.getTypeScriptAlgebraicType(),
      primaryKey: "key",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    user_data: {
      tableName: "user_data",
      rowType: UserData.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    authenticate_admin: {
      reducerName: "authenticate_admin",
      argsType: AuthenticateAdmin.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    delete_personal_best: {
      reducerName: "delete_personal_best",
      argsType: DeletePersonalBest.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    kick_player: {
      reducerName: "kick_player",
      argsType: KickPlayer.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    set_name_for: {
      reducerName: "set_name_for",
      argsType: SetNameFor.getTypeScriptAlgebraicType(),
    },
    set_player_banned: {
      reducerName: "set_player_banned",
      argsType: SetPlayerBanned.getTypeScriptAlgebraicType(),
    },
    set_user_data: {
      reducerName: "set_user_data",
      argsType: SetUserData.getTypeScriptAlgebraicType(),
    },
    update_personal_best: {
      reducerName: "update_personal_best",
      argsType: UpdatePersonalBest.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AuthenticateAdmin", args: AuthenticateAdmin }
| { name: "ClientConnected", args: ClientConnected }
| { name: "DeletePersonalBest", args: DeletePersonalBest }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "KickPlayer", args: KickPlayer }
| { name: "SetName", args: SetName }
| { name: "SetNameFor", args: SetNameFor }
| { name: "SetPlayerBanned", args: SetPlayerBanned }
| { name: "SetUserData", args: SetUserData }
| { name: "UpdatePersonalBest", args: UpdatePersonalBest }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  authenticateAdmin(token: string) {
    const __args = { token };
    let __writer = new BinaryWriter(1024);
    AuthenticateAdmin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("authenticate_admin", __argsBuffer, this.setCallReducerFlags.authenticateAdminFlags);
  }

  onAuthenticateAdmin(callback: (ctx: ReducerEventContext, token: string) => void) {
    this.connection.onReducer("authenticate_admin", callback);
  }

  removeOnAuthenticateAdmin(callback: (ctx: ReducerEventContext, token: string) => void) {
    this.connection.offReducer("authenticate_admin", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  deletePersonalBest(id: bigint) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeletePersonalBest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_personal_best", __argsBuffer, this.setCallReducerFlags.deletePersonalBestFlags);
  }

  onDeletePersonalBest(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.onReducer("delete_personal_best", callback);
  }

  removeOnDeletePersonalBest(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.offReducer("delete_personal_best", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  kickPlayer(identity: Identity) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    KickPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("kick_player", __argsBuffer, this.setCallReducerFlags.kickPlayerFlags);
  }

  onKickPlayer(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.onReducer("kick_player", callback);
  }

  removeOnKickPlayer(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.offReducer("kick_player", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

  setNameFor(identity: Identity, name: string) {
    const __args = { identity, name };
    let __writer = new BinaryWriter(1024);
    SetNameFor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name_for", __argsBuffer, this.setCallReducerFlags.setNameForFlags);
  }

  onSetNameFor(callback: (ctx: ReducerEventContext, identity: Identity, name: string) => void) {
    this.connection.onReducer("set_name_for", callback);
  }

  removeOnSetNameFor(callback: (ctx: ReducerEventContext, identity: Identity, name: string) => void) {
    this.connection.offReducer("set_name_for", callback);
  }

  setPlayerBanned(identity: Identity, banned: boolean) {
    const __args = { identity, banned };
    let __writer = new BinaryWriter(1024);
    SetPlayerBanned.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_player_banned", __argsBuffer, this.setCallReducerFlags.setPlayerBannedFlags);
  }

  onSetPlayerBanned(callback: (ctx: ReducerEventContext, identity: Identity, banned: boolean) => void) {
    this.connection.onReducer("set_player_banned", callback);
  }

  removeOnSetPlayerBanned(callback: (ctx: ReducerEventContext, identity: Identity, banned: boolean) => void) {
    this.connection.offReducer("set_player_banned", callback);
  }

  setUserData(position: Vector3, rotation: Vector3, linearVelocity: Vector3, angularVelocity: Vector3, isActive: boolean, trackId: bigint, carId: bigint) {
    const __args = { position, rotation, linearVelocity, angularVelocity, isActive, trackId, carId };
    let __writer = new BinaryWriter(1024);
    SetUserData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_user_data", __argsBuffer, this.setCallReducerFlags.setUserDataFlags);
  }

  onSetUserData(callback: (ctx: ReducerEventContext, position: Vector3, rotation: Vector3, linearVelocity: Vector3, angularVelocity: Vector3, isActive: boolean, trackId: bigint, carId: bigint) => void) {
    this.connection.onReducer("set_user_data", callback);
  }

  removeOnSetUserData(callback: (ctx: ReducerEventContext, position: Vector3, rotation: Vector3, linearVelocity: Vector3, angularVelocity: Vector3, isActive: boolean, trackId: bigint, carId: bigint) => void) {
    this.connection.offReducer("set_user_data", callback);
  }

  updatePersonalBest(trackId: bigint, time: bigint, checkpointTimes: bigint[], carId: number) {
    const __args = { trackId, time, checkpointTimes, carId };
    let __writer = new BinaryWriter(1024);
    UpdatePersonalBest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_personal_best", __argsBuffer, this.setCallReducerFlags.updatePersonalBestFlags);
  }

  onUpdatePersonalBest(callback: (ctx: ReducerEventContext, trackId: bigint, time: bigint, checkpointTimes: bigint[], carId: number) => void) {
    this.connection.onReducer("update_personal_best", callback);
  }

  removeOnUpdatePersonalBest(callback: (ctx: ReducerEventContext, trackId: bigint, time: bigint, checkpointTimes: bigint[], carId: number) => void) {
    this.connection.offReducer("update_personal_best", callback);
  }

}

export class SetReducerFlags {
  authenticateAdminFlags: CallReducerFlags = 'FullUpdate';
  authenticateAdmin(flags: CallReducerFlags) {
    this.authenticateAdminFlags = flags;
  }

  deletePersonalBestFlags: CallReducerFlags = 'FullUpdate';
  deletePersonalBest(flags: CallReducerFlags) {
    this.deletePersonalBestFlags = flags;
  }

  kickPlayerFlags: CallReducerFlags = 'FullUpdate';
  kickPlayer(flags: CallReducerFlags) {
    this.kickPlayerFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  setNameForFlags: CallReducerFlags = 'FullUpdate';
  setNameFor(flags: CallReducerFlags) {
    this.setNameForFlags = flags;
  }

  setPlayerBannedFlags: CallReducerFlags = 'FullUpdate';
  setPlayerBanned(flags: CallReducerFlags) {
    this.setPlayerBannedFlags = flags;
  }

  setUserDataFlags: CallReducerFlags = 'FullUpdate';
  setUserData(flags: CallReducerFlags) {
    this.setUserDataFlags = flags;
  }

  updatePersonalBestFlags: CallReducerFlags = 'FullUpdate';
  updatePersonalBest(flags: CallReducerFlags) {
    this.updatePersonalBestFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get personalBest(): PersonalBestTableHandle {
    return new PersonalBestTableHandle(this.connection.clientCache.getOrCreateTable<PersonalBest>(REMOTE_MODULE.tables.personal_best));
  }

  get setting(): SettingTableHandle {
    return new SettingTableHandle(this.connection.clientCache.getOrCreateTable<Setting>(REMOTE_MODULE.tables.setting));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userData(): UserDataTableHandle {
    return new UserDataTableHandle(this.connection.clientCache.getOrCreateTable<UserData>(REMOTE_MODULE.tables.user_data));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
